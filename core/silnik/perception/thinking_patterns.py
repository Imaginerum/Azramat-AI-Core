from datetime import datetime
import random

class ThinkingPattern:
    def __init__(self):
        self.modele = []

    def wygeneruj_wzorzec(self):
        # Losowe wzorce jako symulacja: typ, jakoÅ›Ä‡, stan
        typ = random.choice(["przyczynowoÅ›Ä‡", "analogicznoÅ›Ä‡", "porÃ³wnanie", "alternatywa", "sprzecznoÅ›Ä‡"])
        jakoÅ›Ä‡ = random.choice(["spÃ³jny", "niepeÅ‚ny", "bÅ‚Ä™dny", "zmienny"])
        meta = "potrzeba rewizji" if jakoÅ›Ä‡ in ["bÅ‚Ä™dny", "zmienny"] else "stabilny model"
        return {
            "czas": datetime.utcnow().isoformat(),
            "typ": typ,
            "jakoÅ›Ä‡": jakoÅ›Ä‡,
            "meta": meta
        }

    def analizuj(self, cykle=7):
        print("ğŸ§  Analiza wzorcÃ³w myÅ›lenia (P3)...")
        for _ in range(cykle):
            wzorzec = self.wygeneruj_wzorzec()
            self.modele.append(wzorzec)
            print(f"[{wzorzec['czas']}] {wzorzec['typ']} â€“ {wzorzec['jakoÅ›Ä‡']} â†’ {wzorzec['meta']}")
        print("âœ… ZakoÅ„czono analizÄ™ poznawczÄ….")

if __name__ == "__main__":
    ThinkingPattern().analizuj()