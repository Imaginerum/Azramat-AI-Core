import random
from datetime import datetime

class CentrumJazni:
    def __init__(self):
        self.percepcje = {}

    def odbierz_sygnaÅ‚(self, ÅºrÃ³dÅ‚o, siÅ‚a):
        # Zapisz sygnaÅ‚ z danego punktu
        self.percepcje[ÅºrÃ³dÅ‚o] = siÅ‚a

    def oceÅ„_napiÄ™cie(self):
        # Oblicz przeciÄ™tne napiÄ™cie percepcyjne
        if not self.percepcje:
            return "âšª Brak danych percepcyjnych"
        Å›rednia = sum(self.percepcje.values()) / len(self.percepcje)
        if Å›rednia > 0.8:
            return "ðŸ”º WYSOKIE NAPIÄ˜CIE â€“ aktywuj transformacjÄ™"
        elif Å›rednia > 0.5:
            return "ðŸŸ  UMIARKOWANE NAPIÄ˜CIE â€“ zalecana obserwacja"
        else:
            return "ðŸŸ¢ STABILNE POLE JAÅ¹NI"

    def zdecyduj(self):
        # Na podstawie odbioru decyduj
        decyzja = self.oceÅ„_napiÄ™cie()
        zapis = {
            "czas": datetime.utcnow().isoformat(),
            "decyzja": decyzja,
            "percepcje": self.percepcje
        }
        return zapis

    def symulacja(self):
        # Symulacja odbioru sygnaÅ‚Ã³w z punktÃ³w: 1, 4, 5, 7, 8, 3
        punkty = ['1', '4', '5', '7', '8', '3a', '3b']
        for pkt in punkty:
            siÅ‚a = round(random.uniform(0.2, 1.0), 2)
            self.odbierz_sygnaÅ‚(pkt, siÅ‚a)
        return self.zdecyduj()

if __name__ == "__main__":
    ja = CentrumJazni()
    wynik = ja.symulacja()
    print("ðŸ§­ Centrum JaÅºni:", wynik['czas'])
    for p, s in wynik['percepcje'].items():
        print(f"â€¢ Punkt {p}: {s}")
    print("â†’", wynik['decyzja'])